<statements> ::= <statement> <whitespace>* <statements> | <end_of_statements>
<end_of_statements> ::= " "
<statement> ::= <variable_declaration> | <variable_mutation> | <function_declaration> | <while_loop> | <for_loop> | <if_statement> | <elif_statement> | <else_statement> | <scope> | <function_call> <semicolon> | <ret_statement> | <break> <semicolon> 

<variable_declaration> ::= <identifier> <type_definition> <equals> <expression> <semicolon>
<variable_mutation> ::= <identifier> <equals> <expression> <semicolon>
<function_declaration> ::= <identifier> <type_definition> <equals> <type_definition> <open_parenthesis> <function_parameters> <close_parenthesis> <scope> 
<while_loop> ::= <while> <open_parenthesis> <expression> <close_parenthesis> <scope>
<for_loop> ::= <for> <for_header> <scope>
<if_statement> ::= <if> <open_parenthesis> <expression> <close_parenthesis> <scope>
<elif_statement> ::= <elif> <open_parenthesis> <expression> <close_parenthesis> <scope> 
<else_statement> ::= <else> <scope>
<scope> ::= <open_curly> <statements> <close_curly>
<function_call> ::= <identifier> <whitespace>* <open_parenthesis> <whitespace>* <function_arguments> <whitespace>* <close_parenthesis>
<ret_statement> ::= <ret> <whitespace>* <expression> <whitespace>* <semicolon> | <ret> <whitespace>* <semicolon>

<expression> ::= <unary_operator> <whitespace>* <expression>  | <expression> <whitespace>* <binary_operator> <whitespace>* <expression> | <open_parenthesis> <whitespace>* <expression> <whitespace>* <close_parenthesis> | <identifier>
<function_parameters> ::= <identifier> <whitespace>* <type_definition> <whitespace>* <comma> <whitespace>* <function_parameters> | <identifier> | <no_param>
<no_param> ::= " "
<for_header> ::= <open_parenthesis> <whitespace>* <identifier> <whitespace>* <type_definition> <whitespace>* <equals> <whitespace>* <expression> <whitespace>* <semicolon> <whitespace>* <expression> <whitespace>* <identifier> <whitespace>* <equals> <whitespace>* <expression> <whitespace>* <close_parenthesis>
<function_arguments> ::= <expression> <whitespace>* <call_continuation> | <no_arguments>
<call_continuation> ::= <comma> <whitespace>* <function_arguments> | <no_arguments>
<no_arguments> ::= " "

<unary_operator> ::= <minus> | <not>
<binary_operator> ::= <plus> | <minus> | <times> | <divide> | <mod> | <and> | <or> | <equal> | <not_equal> | <gt> | <lt> | <geq> | <leq>

<type_definition> ::= "[" <whitespace>* <type> <whitespace>* "]" 
<type> ::= <int_type> | <fn_type> | <any_type>

<equals> ::= "="
<equal> ::= "=="
<not_equal> ::= "!="
<plus> ::= "+"
<minus> ::= "-"
<times> ::= "*"
<divide> ::= "/"
<not> ::= "!"
<mod> ::= "%"
<and> ::= "&&"
<or> ::= "||"
<gt> ::= ">"
<lt> ::= "<"
<geq> ::= ">="
<leq> ::= "<="
<open_parenthesis> ::= "("
<close_parenthesis> ::= ")"
<open_curly> ::= "{"
<close_curly> ::= "}"
<semicolon> ::= ";"
<comma> ::= ","
<ret> ::= "return"
<int_type> ::= "int"
<fn_type> ::= "fn"
<any_type> ::= "_"
<while> ::= "while"
<for> ::= "for"
<if> ::= "if"
<else> ::= "else"
<elif> ::= <else> <whitespace>+ <if> | "elif "
<break> ::= "break "

<letter> ::= [a-z] | [A-Z]
<whitespace> ::= " " | "\t" | "\n"
<identifier> ::= [a-z] ([a-z] | [0-9] | "_")*
